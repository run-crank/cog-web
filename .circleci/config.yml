version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: stackmoxie/web
    docker:
      - image: cimg/base:stable
  docker-user:
    environment:
      IMAGE_NAME: stackmoxie/web
    machine:
      image: ubuntu-2004:202201-02

jobs:
  test:
    docker:
      - image: cimg/node:18.18.0
    steps:
      - checkout
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific package-lock.json
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            # Fallback cache to be used
            - v1-npm-deps-
      - run:
          name: Install Dependencies
          command: |
            npm install
          no_output_timeout: 20m  # Increase timeout to 20 minutes
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Lint Code
          command: |
            npm run lint
      - run:
          name: Test Code
          command: |
            npm test

  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  install-built-cog:
    executor: docker-user
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Install Crank and the built Cog
          command: |
            curl -s https://get.crank.run/install.sh | sh
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:local-test
            crank cog:install $IMAGE_NAME:local-test --ignore-auth
      - run:
          name: List steps
          command: crank registry:steps
      - run:
          name: Uninstall Cog
          command: crank cog:uninstall $IMAGE_NAME --force

  run-test-scenarios:
    executor: docker-user
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      # - run:
      #     name: Install Crank and required Cogs
      #     command: |
      #       curl -s https://get.crank.run/install.sh | sh
      #       docker tag $IMAGE_NAME:latest $IMAGE_NAME:local-test
      #       crank cog:install $IMAGE_NAME:local-test
      #       crank cog:install automatoninc/marketo:0.5.2
      #       crank cog:install automatoninc/hubspot:0.4.1
      # - run:
      #     name: Run all test scenarios
      #     command: crank run ./test/scenarios

  publish-dev:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_SM_USERNAME" --password-stdin
            IMAGE_TAG="dev-v${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:$IMAGE_TAG
      - run:
          name: Publish Docker Image to Azure Container Registry (ACR)
          command: |
            echo "$AZURE_ACR_PASSWORD" | docker login "$AZURE_ACR_NAME.azurecr.io" -u "$AZURE_ACR_USERNAME" --password-stdin
            ACR_IMAGE_TAG="$AZURE_ACR_NAME.azurecr.io/$IMAGE_NAME:dev-v${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $ACR_IMAGE_TAG
            docker push $ACR_IMAGE_TAG

  publish-tag:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_SM_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2
  test-all-branches:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - master
            tags:
              ignore: /.*/
      - build:
          filters:
            branches:
              ignore:
                - master
            tags:
              ignore: /.*/
      - install-built-cog:
          requires:
            - test
            - build
          filters:
            branches:
              ignore:
                - master
            tags:
              ignore: /.*/

  build-master:
    jobs:
      - test:
          filters:
            branches:
              only: master
      - build:
          filters:
            branches:
              only: master
      - run-test-scenarios:
          context: web-cog-sandbox-env-credentials
          requires:
            - build
          filters:
            branches:
              only: master
      - publish-dev:
          context: docker-creds-to-publish-cogs
          requires:
            - test
            - run-test-scenarios
          filters:
            branches:
              only: master

  build-tags:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-tag:
          context: docker-creds-to-publish-cogs
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
